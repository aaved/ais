#!/bin/bash

read -p "Disk: " DISK
read -p "Swap size: " SWAP_SIZE
read -p "Hostname: " HOSTNAME
read -p "Timezone: " TIMEZONE

# Root Password
while true; do
    read -s -p "Root password: " ROOT_PASSWORD0
    echo
    read -s -p "Re-enter password: " ROOT_PASSWORD1
    echo
    [ "${ROOT_PASSWORD0}" = "${ROOT_PASSWORD1}" ] && break
    echo "Passwords did not match."
done

# Add a user
read -p "Username: " USERNAME
while true; do
    read -s -p "Password for ${USERNAME}: " USER_PASSWORD0
    echo
    read -s -p "Re-enter password: " USER_PASSWORD1
    echo
    [ "${USER_PASSWORD0}" = "${USER_PASSWORD1}" ] && break
    echo "Passwords did not match."
done
echo

BASE_PACKAGES=(
    base
    linux
    linux-firmware
)

OTHER_PACKAGES=(
    amd-ucode
    base-devel
    grub
    nano
    networkmanager
    ntfs-3g
    os-prober
    xdg-user-dirs
    xf86-video-amdgpu
    xorg
    xorg-xinit
)

# Update the system clock
system_clock() {
    timedatectl set-ntp true
}

# Partition the disk
partition_disk() {
    fdisk ${DISK} <<-EOF
        o
        n
        p
        1

        ${SWAP_SIZE}
        t
        82
        n
        p
        2


        a
        2
        w
	EOF
}

# Format the partition
format_partition() {
    mkfs.ext4 ${DISK}2
    mkswap ${DISK}1
}

# Mount the file systems
mount_partition() {
    mount ${DISK}2 /mnt
    swapon ${DISK}1
}

# Install base and essential packages
install_base() {
    pacstrap /mnt ${BASE_PACKAGES[@]} ${OTHER_PACKAGES[@]}
}

# Fstab
generate_fstab() {
    genfstab -U /mnt >> /mnt/etc/fstab
}

# Chroot Phase
# Time Zone
set_timezone() {
    ln -sf /usr/share/zoneinfo/${TIMEZONE} /mnt/etc/localtime
    arch-chroot /mnt hwclock --systohc
}

# Localization
generate_locales() {
    sed -i '/#en_US.UTF-8/s/^#//g' /mnt/etc/locale.gen
    arch-chroot /mnt locale-gen
    echo LANG=en_US.UTF-8 > /mnt/etc/locale.conf
}

# Network Configuration
network_configuration() {
    echo ${HOSTNAME} > /mnt/etc/hostname
    echo -e "127.0.0.1 localhost" >> /mnt/etc/hosts
    echo -e "::1       localhost" >> /mnt/etc/hosts
    echo -e "127.0.1.1 ${HOSTNAME}.localdomain ${HOSTNAME}" >> /mnt/etc/hosts
    arch-chroot /mnt systemctl enable NetworkManager
}

# Initramfs
create_initramfs() {
    sed -i '/MODULES=()/s/)$/amdgpu)/g' /mnt/etc/mkinitcpio.conf
    arch-chroot /mnt mkinitcpio -p linux
}

# Root Password
root_password() {
    echo root:${ROOT_PASSWORD1} | chpasswd --root /mnt
}

# Boot Loader
boot_loader() {
    arch-chroot /mnt grub-install --target=i386-pc ${DISK}
    sed -i '/GRUB_DEFAULT=0/s/0$/2/g' /mnt/etc/default/grub
    sed -i '/GRUB_TIMEOUT=5/s/5$/20/g' /mnt/etc/default/grub
    sed -i '/GRUB_CMDLINE_LINUX=""/s/"$/"\nGRUB_DISABLE_OS_PROBER=false/g' /mnt/etc/default/grub
    arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
}

# User Permissions
user_permission() {
    echo "${USERNAME} ALL=(ALL) ALL" >> /mnt/etc/sudoers.d/${USERNAME}
}

# Create User Account
create_user() {
    arch-chroot /mnt useradd ${USERNAME} -m -g users -G wheel,lp,audio,storage,video,network,power -s /bin/bash
    echo ${USERNAME}:${USER_PASSWORD1} | chpasswd --root /mnt
}

unmount_partition() {
    umount -R /mnt
    echo "You may now reboot."
    # reboot
}

main() {
    set -euxo pipefail
    system_clock
    partition_disk
    format_partition
    mount_partition
    install_base
    generate_fstab
    set_timezone
    generate_locales
    network_configuration
    create_initramfs
    root_password
    boot_loader
    user_permission
    create_user
    unmount_partition
}

main
